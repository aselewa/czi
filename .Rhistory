theme_minimal() +
scale_x_discrete(limits = type_order) + ylab('log(Fold of Enrichment)') +
xlab('Types') +
theme(axis.text.y = element_text(size=12), axis.text.x = element_text(size=12), text=element_text(size=15))
dat = read.delim('~/Downloads/enrichment_stats.txt',sep='\t',stringsAsFactors = F)
temp = strsplit(dat$anno,split='_')
Call = sapply(temp, function(x){x[2]})
dat$Call = Call
dat$Type = c("DOPA","DOPA","Glut","Glut","iPSC","iPSC","NPC","NPC")
type_order = c("iPSC","iPSC","NPC","NPC","Glut","Glut","DOPA","DOPA")
ggplot(data = dat, aes(x = Type, y=beta, fill=Call)) +
geom_bar(stat = "identity",position=position_dodge()) +
scale_fill_brewer(palette="Paired") +
theme_minimal() +
scale_x_discrete(limits = type_order) + ylab('log(Fold of Enrichment)') +
xlab('Types') +
theme(axis.text.y = element_text(size=12), axis.text.x = element_text(size=12), text=element_text(size=15))
install.packages("BiocManager")
install.packages("devtools")
library(devtools)
install_github("MarioniLab/scran")
source("https://bioconductor.org/biocLite.R")
biocLite("scran")
install.packages('BiocNeighbors')
install.packages("BiocManager")
BiocManager::install("BiocNeighbors", version = "devel")
BiocManager::install("BiocNeighbors", version = "3.8")
BiocManager::install(version = "3.8")
BiocManager::install("BiocNeighbors", version = "devel")
install_github("MarioniLab/scran")
library(scran)
setwd('~/Downloads')
library(data.table)
setwd('~/')
comb <- data.frame(fread('DROP_combined_counts.tsv',sep='\t'),row.names=1)
cells <- colnames(comb)
temp <= strsplit(cells, split='_')
temp <- strsplit(cells, split='_')
idn <- sapply(temp, function(x){x[3]})
rep1_cells <- cells[idn == "Rep1"]
rep2_cells <- cells[idn == "Rep2"]
corrected <- fastMNN(as.matrix(comb[,rep1_cells]),as.matrix(comb[,rep2_cells]), d = 25)
corrected <- fastMNN(as.matrix(comb[,rep1_cells]),as.matrix(comb[,rep2_cells]), d = 25, cos.norm = F, approximate = T)
comb = as.data.frame(t(log((t(comb)/colSums(comb))*10^6 + 0.01)))
library(dyplr)
library(dplyr)
var = data.frame(t(comb)) %>% summarise_all(funs(sd))
library(dplyr)
library(data.table)
combined = data.frame(fread('DROP_same_day_batch_corrected.tsv',sep='\t'),row.names=1)
combined.filtered=combined
cells = strsplit(colnames(combined.filtered),split='_')
days = sapply(cells, FUN=function(x){x[3]})
#lookup = data.frame(row.names=unique(days),cols=c("orange","green3","blue","purple","magenta"))
lookup = data.frame(row.names=unique(days),cols=c("red","blue"))
colors = as.character(lookup[days,"cols"])
rm(combined)
ipsc=CreateSeuratObject(combined.filtered)
library(Seurat)
ipsc=CreateSeuratObject(combined.filtered)
rm(combined.filtered)
gc()
ipsc=FindVariableGenes(object = ipsc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.15, x.high.cutoff = 3, y.cutoff = 1)
ipsc=FindVariableGenes(object = ipsc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.15, x.high.cutoff = 3, y.cutoff = 1)
library(data.table)
combined = data.frame(fread('DROP_combined_noChimp_counts.tsv.gz',sep='\t'),row.names=1)
nUMI = colSums(combined)
nGene = colSums((combined>0)*1)
det.rate = nGene/nrow(combined)
mito.genes = grep("^MT-", rownames(combined), value = T)
percent.mito = colSums(combined[mito.genes, ])/nUMI
cells = strsplit(colnames(combined),split='_')
day = factor(sapply(cells, FUN=function(x){x[2]}),levels = c('0','1','3','7','15'))
names(day) = colnames(combined)
lookup = data.frame(row.names=unique(day), cols= c('orange','green3','blue','purple','magenta'))
batch =  as.factor(sapply(cells, FUN=function(x){x[3]}))
names(batch) = colnames(combined)
########################### Seurat ##########################
library(Seurat)
ipsc=CreateSeuratObject(combined)
ipsc=NormalizeData(ipsc)
ipsc=FindVariableGenes(object = ipsc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.15, x.high.cutoff = 3, y.cutoff = 1.5)
ipsc = ScaleData(ipsc)
ipsc=RunPCA(ipsc, pc.genes=ipsc@var.genes, do.print=F)
PCElbowPlot(ipsc)
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.25, print.output = F, force.recalc = TRUE)
ipsc=RunTSNE(ipsc, reduction.use = 'pca', dims.use = 1:7, check_duplicates = FALSE,perplexity = 50)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.22, print.output = F, force.recalc = TRUE)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
ipsc=RunTSNE(ipsc, reduction.use = 'pca', dims.use = 1:6, check_duplicates = FALSE,perplexity = 50)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
ipsc=RunTSNE(ipsc, reduction.use = 'pca', dims.use = 1:7, check_duplicates = FALSE,perplexity = 50)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
markers = FindAllMarkers(ipsc, only.pos = TRUE, min.pc = 0.25, logfc.threshold = 0.25)
top10 = markers %>% group_by(cluster) %>% top_n(20, avg_logFC)
DoHeatmap(ipsc, genes.use=top10$gene, slim.col.label= TRUE, remove.key = TRUE)
library(dplyr)
top10 = markers %>% group_by(cluster) %>% top_n(10, avg_logFC)
DoHeatmap(ipsc, genes.use=top10$gene, slim.col.label= TRUE, remove.key = TRUE)
png('figures/drop_FeaturePlot.png',res=200, width = 1400, height=1500)
GENES = c('DKK1','NANOG','FBN2','APELA','MYH6','TNNI1','TNNT2','AFP','SERPINA1')
FeaturePlot(ipsc, features.plot = GENES, cols.use = c('grey','blue'),pt.size = 0.5)
dev.off()
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.25, print.output = F, force.recalc = TRUE)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.24, print.output = F, force.recalc = TRUE)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.2, print.output = F, force.recalc = TRUE)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.23, print.output = F, force.recalc = TRUE)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5)
dev.off()
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.2, print.output = F, force.recalc = TRUE)
curr.idents = as.factor(c(0,1,2,3,4,5,6))
new.idents = c('iPSC 1','Myocyte Mesoderm','Cardiomyocytes','iPSC 2','Cardiac Progenitor','Hepatocytes','Renal Cells')
ipsc@ident = plyr::mapvalues(ipsc@ident, from = curr.idents, to = new.idents)
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5,)
dev.off()
png('figures/drop_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5,colors.use =  c('orange','green3','magenta','blue','purple','cyan','red'))
dev.off()
table = read.delim('~/Downloads/AB-EH1129-Drop-CZI7_S1_cell_to_species_assignment.txt',sep='\t',col.names = T)
table = read.delim('~/Downloads/AB-EH1129-Drop-CZI7_S1_cell_to_species_assignment.txt',sep='\t')
head(table)
hist(table$human_score)
hist(table$panTro_score)
hist(table$hg_specificity_score)
chimps = row.names(table)[table$hg_specificity_score<0.5]
chimps
table
chimps = table$CB[table$hg_specificity_score<0.5]
chimps
barcodes = sapply(cells, function(x)[x[1]])
barcodes = sapply(cells, function(x){x[1]})
(as.character(chimps) %in% barcodes)
sum(as.character(chimps) %in% barcodes)
library(data.table)
combined = data.frame(fread('DROP_combined_counts.tsv.gz',sep='\t'),row.names=1)
sum(as.character(chimps) %in% barcodes)
cells = strsplit(colnames(combined),split='_')
barcodes = sapply(cells, function(x){x[1]})
sum(as.character(chimps) %in% barcodes)
library(data.table)
combined = data.frame(fread('DRONC_combined_counts.tsv.gz',sep='\t'),row.names=1)
nUMI = colSums(combined)
nGene = colSums((combined>0)*1)
det.rate = nGene/nrow(combined)
mito.genes = grep("^MT-", rownames(combined), value = T)
percent.mito = colSums(combined[mito.genes, ])/nUMI
cells = strsplit(colnames(combined),split='_')
day = factor(sapply(cells, FUN=function(x){x[2]}),levels = c('0','1','3','7','15'))
names(day) = colnames(combined)
lookup = data.frame(row.names=unique(day), cols= c('orange','green3','blue','purple','magenta'))
batch =  as.factor(sapply(cells, FUN=function(x){x[3]}))
names(batch) = colnames(combined)
library(Seurat)
ipsc=CreateSeuratObject(combined)
ipsc=NormalizeData(ipsc)
ipsc=FindVariableGenes(object = ipsc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.15, x.high.cutoff = 3, y.cutoff = 1.5)
ipsc = ScaleData(ipsc)
ipsc=RunPCA(ipsc, pc.genes=ipsc@var.genes, do.print=F)
PCElbowPlot(ipsc)
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.25, print.output = F, force.recalc = TRUE)
ipsc=RunTSNE(ipsc, reduction.use = 'pca', dims.use = 1:7, check_duplicates = FALSE)
png('figures/dronc_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5,colors.use =  c('orange','green3','blue','cyan','purple','magenta'))
dev.off()
curr.idents = as.factor(c(0,1,2,3,4,5))
new.idents = c('iPSC 1','Myocyte Mesoderm','iPSC 2','Hepatocytes','Cardiac Progenitor','Cardiomyocytes')
png('figures/dronc_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5,colors.use =  c('orange','green3','blue','cyan','purple','magenta'))
dev.off()
ipsc@ident = plyr::mapvalues(ipsc@ident, from = curr.idents, to = new.idents)
png('figures/dronc_tSNE_clusters.png',res=200, width = 1300, height=800)
TSNEPlot(ipsc,pt.size = 0.5,colors.use =  c('orange','green3','blue','cyan','purple','magenta'))
dev.off()
library(monocle)
n=500
sub.cells = c()
for(d in unique(day)){
curr = day[which(day==d)]
sub.cells = c(sub.cells, sample(names(curr), n))
}
sub_combined = as.matrix(ipsc@data)[,sub.cells]
var_genes = ipsc@var.genes
sub_days = day[sub.cells]
samples.df = data.frame(row.names = colnames(sub_combined), Day = sub_days)
features.df = data.frame(row.names = row.names(sub_combined), gene_short_name = row.names(sub_combined))
pd = new("AnnotatedDataFrame",data=samples.df)
fd = new("AnnotatedDataFrame",data=features.df)
ipsc_m = newCellDataSet(sub_combined,phenoData = pd, featureData = fd,expressionFamily = gaussianff())
ipsc_m = setOrderingFilter(ipsc_m, var_genes)
ipsc_m = reduceDimension(ipsc_m, max_components = 2, method = 'DDRTree',norm_method = 'none')
ipsc_m = orderCells(ipsc_m)
p = plot_cell_trajectory(ipsc_m,color_by = "Day",cell_size = 0.5)
map_col = as.character(lookup$cols)
names(map_col) = row.names(lookup)
p + scale_color_manual(values = map_col, name = "Day",labels = c("0","1","3","7","15")) +
theme(legend.position = "right",legend.text = element_text(size=12)) +
guides(color = guide_legend(override.aes = list(size=2)))
png('figures/dronc_monocle.png',res = 200, width = 1000, height = 700)
p = plot_cell_trajectory(ipsc_m,color_by = "Day",cell_size = 0.5)
map_col = as.character(lookup$cols)
names(map_col) = row.names(lookup)
p + scale_color_manual(values = map_col, name = "Day",labels = c("0","1","3","7","15")) +
theme(legend.position = "right",legend.text = element_text(size=12)) +
guides(color = guide_legend(override.aes = list(size=2)))
dev.off()
plot_genes_in_pseudotime('TNNT2', color_by = "Hours")
plot_genes_in_pseudotime(combined['TNNT2',], color_by = "Hours")
plot_genes_in_pseudotime(combined['TNNT2',])
BEAM_res <- BEAM(ipsc_m, branch_point = 1, cores = 1)
BEAM_res <- BEAM_res[order(BEAM_res$qval),]
BEAM_res <- BEAM_res[,c("gene_short_name", "pval", "qval")]
plot_genes_branched_heatmap(lung[row.names(subset(BEAM_res,
qval < 1e-4)),],
branch_point = 1,
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T)
plot_genes_branched_heatmap(ipsc_m[row.names(subset(BEAM_res,
qval < 1e-4)),],
branch_point = 1,
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T)
library(data.table)
combined = data.frame(fread('DROP_combined_counts.tsv.gz',sep='\t'),row.names=1)
nUMI = colSums(combined)
nGene = colSums((combined>0)*1)
det.rate = nGene/nrow(combined)
mito.genes = grep("^MT-", rownames(combined), value = T)
percent.mito = colSums(combined[mito.genes, ])/nUMI
cells = strsplit(colnames(combined),split='_')
day = factor(sapply(cells, FUN=function(x){x[2]}),levels = c('0','1','3','7','15'))
names(day) = colnames(combined)
lookup = data.frame(row.names=unique(day), cols= c('orange','green3','blue','purple','magenta'))
batch =  as.factor(sapply(cells, FUN=function(x){x[3]}))
names(batch) = colnames(combined)
########################### Seurat ##########################
library(Seurat)
ipsc=CreateSeuratObject(combined)
ipsc=NormalizeData(ipsc)
ipsc=FindVariableGenes(object = ipsc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.15, x.high.cutoff = 3, y.cutoff = 1.5)
ipsc = ScaleData(ipsc)
ipsc=RunPCA(ipsc, pc.genes=ipsc@var.genes, do.print=F)
PCElbowPlot(ipsc)
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.2, print.output = F, force.recalc = TRUE)
library(data.table)
combined = data.frame(fread('DRONC_combined_counts.tsv.gz',sep='\t'),row.names=1)
nUMI = colSums(combined)
nGene = colSums((combined>0)*1)
det.rate = nGene/nrow(combined)
mito.genes = grep("^MT-", rownames(combined), value = T)
percent.mito = colSums(combined[mito.genes, ])/nUMI
cells = strsplit(colnames(combined),split='_')
day = factor(sapply(cells, FUN=function(x){x[2]}),levels = c('0','1','3','7','15'))
names(day) = colnames(combined)
lookup = data.frame(row.names=unique(day), cols= c('orange','green3','blue','purple','magenta'))
batch =  as.factor(sapply(cells, FUN=function(x){x[3]}))
names(batch) = colnames(combined)
########################### Seurat ##########################
library(Seurat)
ipsc=CreateSeuratObject(combined)
ipsc=NormalizeData(ipsc)
ipsc=FindVariableGenes(object = ipsc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.15, x.high.cutoff = 3, y.cutoff = 1.5)
ipsc = ScaleData(ipsc)
ipsc=RunPCA(ipsc, pc.genes=ipsc@var.genes, do.print=F)
PCElbowPlot(ipsc)
ipsc = FindClusters(ipsc, reduction.type = 'pca', dims.use = 1:7, resolution = 0.25, print.output = F, force.recalc = TRUE)
markers = FindAllMarkers(ipsc, only.pos = TRUE, min.pc = 0.25, logfc.threshold = 0.25)
top10 = markers %>% group_by(cluster) %>% top_n(20, avg_logFC)
DoHeatmap(ipsc, genes.use=top10$gene, slim.col.label= TRUE, remove.key = TRUE)
top10
top10 = markers %>% group_by(cluster) %>% top_n(50, avg_logFC)
top10[top10$cluster==3]
top10[top10$cluster==3,]
as.data.frame(top10[top10$cluster==3,])
as.data.frame(top10[top10$cluster==3,])$gene
as.data.frame(top10[top10$cluster==5,])$gene
library(data.table)
combined = data.frame(fread('~/Downloads/DROP_combined_counts.txt',sep='\t'),row.names=1)
nUMI = colSums(combined)
nGene = colSums((combined>0)*1)
det.rate = nGene/nrow(combined)
mito.genes = grep("^MT-", rownames(combined), value = T)
percent.mito = colSums(combined[mito.genes, ])/nUMI
cells = strsplit(colnames(combined),split='_')
day = factor(sapply(cells, FUN=function(x){x[2]}),levels = c('0','1','3','7','15'))
names(day) = colnames(combined)
lookup = data.frame(row.names=unique(day), cols= c('orange','green3','blue','purple','magenta'))
batch =  as.factor(sapply(cells, FUN=function(x){x[3]}))
names(batch) = colnames(combined)
combined[1,1]
combined = data.frame(fread('DROP_combined_counts.tsv.gz',sep='\t'),row.names=1)
combined = data.frame(fread('~/Downloads/DROP_combined_counts.txt',sep='\t'),row.names=1)
requireNamespace("hdf5r", quietly = TRUE) || stop("Please install the 'hdf5r' package")
infile <- hdf5r::H5File$new(filename)
library(data.table)
scdata = data.frame
library(data.table)
scdata <- data.frame(fread('/Users/aselewa/ncbi/dbGaP-17952/files/64404/PhenoGenotypeFiles/ChildStudyConsentSet_phs000834.SCAP_T.v7.p1.c1.GRU/GenotypeFiles/counts/dge_matrix.txt',sep='\t'),row.names=1)
scdata[,1]
f <- MASS::fitdistr(scdata[1,],"Negative Binomial")
scdata[1,]
f <- MASS::fitdistr(unlist(unname(scdata[1,])),"Negative Binomial")
library(edgeR)
dgList = DGEList(counts=scdata,genes=row.names(scdata))
countsPerMillion <- cpm(dgList)
summary(countsPerMillion)
keep <- which(rowSums(countCheck) >= 2)
dgList <- dgList[keep,]
countCheck = countsPerMillion > 1
head(countCheck)
keep <- which(rowSums(countCheck) >= 2)
sum(keep)
dgList <- dgList[keep,]
dgList <- estimateGLMCommonDisp(dgList, design=designMat)
countsPerMillion[1,]
gene.mean = apply(countsPerMillion, 1, mean)
gene.var = apply(countsPerMillion, 1, var)
sampleType<- rep("N", ncol(dgList))
designMat <- model.matrix(sampleType)
devtools::install_github(bvieth/powsim)
devtools::install_github("bvieth/powsim")
library('powsimr')
library('powsimR')
MASS::fitdistr(scdata[1,],densfun = "Negative Binomial")
MASS::fitdistr(as.vector(scdata[1,](),densfun = "Negative Binomial")
MASS::fitdistr(as.vector(scdata[1,]),densfun = "Negative Binomial")
MASS::fitdistr(as.numeric(scdata[1,]),densfun = "Negative Binomial")
MASS::fitdistr(as.numeric(countsPerMillion[1,]),densfun = "Negative Binomial")
MASS::fitdistr(as.numeric(scdata[1,]),densfun = "Negative Binomial")
scdata = scdata[rowSums(scdata>0)>10,]
dim(scdata)
hist(colSums(scdata))
scdata <- data.frame(fread('/Users/aselewa/ncbi/dbGaP-17952/files/64404/PhenoGenotypeFiles/ChildStudyConsentSet_phs000834.SCAP_T.v7.p1.c1.GRU/GenotypeFiles/counts/dge_matrix.txt',sep='\t'),row.names=1)
scdata <- scdata[rowSums(scdata>0)>10,]
library(data.table)
library(MASS)
x = MASS::fitdistr(as.numeric(scdata[1,]),densfun = "Negative Binomial")
x[1]
x[2]
x$estimate
ngenes = dim(scdata)[1]
gene.disp = rep(0, ngenes)
gene.mean = rep(0, ngenes)
for(i in 1:10){
fit = fitdistr(as.numeric(scdata[i,]), "Negative Binomial")
gene.disp = fit$estimate[1]
gene.mean = fit$estimate[2]
}
for(i in 1:ngenes){
fit = fitdistr(as.numeric(scdata[i,]), "Negative Binomial")
gene.disp = fit$estimate[1]
gene.mean = fit$estimate[2]
}
hist(rowSums(scdata))
hist(rowSums(scdata),100)
rowSums(scdata)
hist(rowSums(scdata))
hist(rowSums(scdata),xlim=c(0,5e07))
hist(rowSums(scdata),xlim=c(0,5e07),100)
min(rowSums(scdata))
max(rowSums(scdata))
scdata <- scdata[rowSums(scdata>0)>100,]
dim(scdata)
ngenes = dim(scdata)[1]
gene.disp = rep(0, ngenes)
gene.mean = rep(0, ngenes)
for(i in 1:ngenes){
fit = fitdistr(as.numeric(scdata[i,]), "Negative Binomial")
gene.disp[i] = fit$estimate[1]
gene.mean[i] = fit$estimate[2]
}
plot(gene.mean, gene.disp)
countsPerMillion[1,]
dgList <- estimateGLMCommonDisp(dgList)
plotBCV(dgList)
dgList <- estimateGLMTagwiseDisp(dgList)
plotBCV(dgList)
dgList$tagwise.dispersion
jjjj\
library(gplots)
library(RColorBrewer)
library(gplots)
library(ggtree)
source("/Users/aselewa/CallCNVs.R")
# only load data if they are not here
#gtex_breast <- read.delim("/Users/aselewa/sc_call_variants/gtex_breast.txt",row.names = 1,stringsAsFactors = FALSE)
#tpms <- read.delim('/Users/aselewa/sc_call_variants/tpms_clean.txt')
chr <- as.integer(readLines('/Users/aselewa/sc_call_variants/chr.txt'))
tpmsOrdered <- tpms
#keep genes that are in both GTEx and scRNAseq
a <- row.names(tpmsOrdered) %in% row.names(gtex_breast)
tpmsOrdered <- tpmsOrdered[a, ]
chr <- chr[a]
#Get cell names for specific patient
patient <- paste0('BC', '03', '_')
cells <- grep(patient, colnames(tpmsOrdered), value = TRUE)
#Get patient appropriate expression matrix. Find top ~10k expressed genes
TPMs <- log2(1 + tpmsOrdered[, cells])
filter <- rowSums(TPMs) > 4
TPMs <- TPMs[filter, ]
chr <- chr[filter]
#Center expression matrix by row using gtex mean
gtex <- log2(gtex_breast[row.names(TPMs), ] + 1)
gtexMeans <- rowMeans(gtex)
zscores <- apply(TPMs, 2, function(x)
(x - gtexMeans))
#Smoothing z-scores
win <- 100
n <- nrow(zscores)
chrom_exps <- matrix(, nrow = (n - win), ncol = ncol(zscores))
colnames(chrom_exps) <- colnames(zscores)
newchr <- rep(0, (n - win))
for (j in seq((win / 2) + 1, (n - (win / 2)))) {
chrom_exps[j - (win / 2), ] <-
colMeans(zscores[(j - (win / 2)):(j + (win / 2)), ])
newchr[j - (win / 2)] <-  mean(chr[(j - (win / 2)):(j + (win / 2))])
}
newchr <- round(newchr)
seps <- rep(0, 22)
seps[1] <- length(which(newchr == 1))
for (j in seq(2, 22)) {
x <- which(newchr == j)
seps[j] <- x[length(x)]
}
chrom_exps <- scale(chrom_exps, scale = FALSE)
library(gplots)
library(RColorBrewer)
library(gplots)
library(ggtree)
source("/Users/aselewa/CallCNVs.R")
# only load data if they are not here
gtex_breast <- read.delim("/Users/aselewa/sc_call_variants/gtex_breast.txt",row.names = 1,stringsAsFactors = FALSE)
tpms <- read.delim('/Users/aselewa/sc_call_variants/tpms_clean.txt')
l
ls
scdata <- read.delim('HEK-drop-dronc/reads.293FTDR_S1_R1_001.fastq_bq10_star_corrected.umi.dge.txt',sep='\t',row.names=1)
devtools::install_github("gavinha/TitanCNA")
devtools::install_github("gavinha/TitanCNA")
library(TitanCNA)
warnings()
library(Seurat)
sessionInfo()
install.packages('Rtsne',version='0.15')
install.packages("Rtsne", version = "0.15")
install.packages("Rtsne", version = "0.15")
install.packages("Rtsne", version = "0.15")
library(Rtsne)
library(biomaRt)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
results <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "ensembl_peptide_id"),
filters = "ensembl_transcript_id", values = "ENST00000296026",
mart = mart)
results
results <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "ensembl_peptide_id"),
filters = "ensembl_transcript_id",
mart = mart)
ref_alt_count = readLines('~/DO32596_tumor_at_germline_SNPs_REF_ALT.txt')
head(ref_alt_count)
AF = apply(ref_alt_count)
strsplit(ref_alt_count,split = ',')
N=10000
x <- rep(0,N)
y <- rep(0,N)
for(i in 1:N){
angle <- runif(1)
radius <- runif(1)
x[i] <- radius*cos(2*pi*angle)
y[i] <- radius*sin(2*pi*angle)
}
plot(x,y)
python
sess = tf$Session()
library(tensorflow)
sess = tf$Session()
tf
find.package("tensorflow")
setwd('~/CZI')
load('drop_seurat_object.Robj')
VlnPlot(ipsc, features.plot = 'nUMI')
VlnPlot(ipsc, features.plot = 'nUMI',point.size.use = 0)
VlnPlot(ipsc, features.plot = c(nGene,'nUMI'),point.size.use = 0)
VlnPlot(ipsc, features.plot = c('nGene','nUMI'),point.size.use = 0)
VlnPlot(ipsc, features.plot = c('nGene','nUMI'),point.size.use = 0,x.lab.rot = T)
